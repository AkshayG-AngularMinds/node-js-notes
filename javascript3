


               IMPORTANT 
===================================================================================================================================================
https://roadsidecoder.hashnode.dev/   
roadside codeer notes (blogs)


===================================================================================================================================================





========================================================JAVASCRIPT FUNCTIONS ======================================================================

1. FUNCTION DECLARATION : 
   function square(num){
    return num*num;
   }

  this is called as function declaration or function definition or function statement.




2. FUNCTION EXPRESSION: 
     When we store a function inside of a variable is called as function expression.
      e.g. 
        var square=function(num){
          return num*num;
        }
        square(5)



3. FIRST CLASS FUNCTION : 
    function can be treated as a variable is called as First Class Funtion. In this case function can be pass into another function, can be 
      used , manipulated and also returned from those functions.

      e.g.
        function square(num){
            return num*num;
        }

        function display(fn){
            console.log("square is : "+fn(5))
        }
        display(square)



IIFE: IMMEDIATELY INVOKED FUNCTION EXPRESSION: 
    (function(num){
      console.log("alo", num*num)
    })(5)




5. ARGUMENTS AND PARAMETERS: 
function fun(num){    //params
   return num*num;
}

fun(5)  // arguments





6. CALLBACK FUNCTION : 
      callback function is a function passed into another function as an argument.

      e.g. 
         function fun(){
            return 10;
         }
         function second(callback){
            console.log(callback())
         }
         second(fun);
===================================================================================================================================================

CURRYING : 
   instead of passing all parameters in single bracket. we can seperate it using currying : 

   function sum(a){
      return function(b){
         return a+b;
      }
   }

   sum(2)(4)

    O/P : 6 




INFINITE CURRYING : 
   function f(a){
    return function (b){
        if(b) return f(a+b)
        return a
    }
}
console.log(f(4)(4)(2)())

// OP : 10




===================================================================================================================================================
===================================================================================================================================================
EVENT PROPAGATION:
  1. EVENT BUBBLING : 
      Bubbles work as down to up, so in event bubbling also functionalities works as down to up.   
  2. EVENT CAPTURING : 
        it will start from top .
        for that we need to add property to the function as capture : true .

        e.g. 
        div.addEventListener("click"()=>{
            console.log("hello");
        },{
          capture:true,
        })  

        
        div.addEventListener("click"()=>{
            console.log("hello");
        },{
          capture:true,
        })




3. EVENT DELEGATION : 
      Event Delegation means where we add eventlistener to the parent element, instead of adding it to every child element. 

    
