
1. ECMA Script: 
	ECMAScript (/ˈɛkməskrɪpt/; ES) is a standard for scripting languages, including JavaScript, JScript, and ActionScript. It is also best known as a JavaScript standard intended to ensure the interoperability of web pages across different web browsers. It is standardized by Ecma International in the document ECMA-262.
	In the early days, for single websites developer needs to write code multiple times , for different browsers, so to avoid this , ECMA script in used.
	
	
2. JAVASCRIPT ENGINES:
	Javascript code we write can not be understood by the computer.
	So the javascript engine is the program that converts javascript code that developers write into machine code that allows computer to perform specific task.
	
	
3. WHAT IS NODE JS:
	Node js is open source, cross platform Javascript runtime environment.
	
	Open source - source code is publicly available for sharing and modification.
	cross platform- available on Mac, windows and Linux
	Javascript runtime environment - provides all the necessary components which allows to use javascript program outside the browser.
	
	

==================================================> MODULES <================================================================================================


4. MODULES IN NODE JS : 
	it is an encapsulated and reusable chunk of code that has its own context.
	In node js, each file is treated as a separate module.
	
	Types : 	
		1. Local modules : Modules that we create in our application.
		2. Build in modules : Modules that node js ships with out of the box
		3. Third party modules : Modules written by other developers that we can use in our application.	
		

===================================================> LOCAL MODULES <=================================================================================

	
		Before modules code is executed node js is wrapped it in IIFE 
		to load module into another file we use require() function.
		
	Summary of MODULE SCOPE: 
		Each loaded module in node js is wrapped with an IIFE that provides private scoping of code.
		IIFE allows you to repeat variable or function names without any conflicts.
		
		
		
	## . MODULE WRAPPER: 
			Every module in node js gets wrapped in IIFE before being loaded. 
			IIFE helps keep top- level variables scoped to the module rather than the global object
			The IIFE that wraps every module contains 5 parameters which are pretty important for the functioning of a module.
			
	
	passing argument to IIFE: 
		(function(message){
			console.log(message);
		})("hello") 			
		
		o/p: hello
				
	
	Structure of MODULE WRAPPER: 
	
	//these parameters are by default available in node IIFE function. 
	
		(function(exports, require, module, __filename, __dirname){
			const superhero="superman";
			console.log(superhero);
		})()
	
	
	
16
	
	
	
	## . MODULE CACHING: 
		e.g. 
			super-hero.js
			
			class SuperHero{
				constructor(name){
					this.name=name;
				}
				getName(){
					returnt this.name;
				}
				
				setName(name){
					this.name=name;
				}
			}
			
			module.exports=new SuperHero("Superman");
			
			
			NOW IN index.js
			 
			const superhero=require("./super-hero");
			console.log(superhero.getName());    // Superman    =>  this generates from superHero class  check exports function
			superhero.setName("Batman");
			console.log(superhero.getName());    // Batman
			
			const newSuperhero=require("./super-hero")
			console.log(newSuperhero.getName());      // Batman       => it still displays batman 
			
			
			when we write require() two times for same file , it will cached only single time , second time it will not goes to that file 
			
			
			if we want to change it then in super-hero.js when exporting export just class as SuperHero and not SuperHero("Superman") .
			
			note => no need to write new .
			
		i.e. =====>
		super-hero.js
			
			class SuperHero{
				constructor(name){
					this.name=name;
				}
				getName(){
					returnt this.name;
				}
				
				setName(name){
					this.name=name;
				}
			}
			
			module.exports=SuperHero;

	
			NOW IN index.js
			 
			const SuperHero=require("./super-hero");
			const s1=new SuperHero("Hello");    // Hello
			console.log(s1.getName());
			s1.setName("Hii")
			console.log(s1.getName());   // Hii
			const s2=new SuperHero("World")
			console.log(s2.getName());      // World           Here it change the name .
			
			
			

16. ECMA Modules:
	 we can import modules without using require also, i.e. by using import .
	 we need to create files using mjs extension , not using js extension.
	 
	  e.g. 
	  	in math.mjs
	  	
	  	const add=(a,b)=>{
	  		return a+b;
	  	}
	  	
	  	const sub=(a,b)=>{
	  		return a-b;
	  	}
				
		export default{
			add, 
			sub,
		}
		
		
		
		in index.mjs
		
		import math from "./math.mjs"
		const {add, sub}=math;
		console.log(add(3,4));
		console.log(sub(5,1);
		
				

	
	
	NOTE :
		1. ES modules is the ECMAScript Standard for module.
		2. It was introduced with ES2015.
		3. Node 14 and above support ES modules.
		4. Instead of module.export, we use export keyword.
		5. The export an be default or named.
		6. If it is default export, we can assign any name while exporting.
		7. If it is named export, the import name must be same.
		
	SAME AS REACTJS 
	
	
	
NOTE: 
	node index.js command only compile code one time, if we made any changes in file then we need to again run our node application using node index.js command ,
    to avoid this we use watch ,
    	COMMAND: 	
    		node --watch index
    		
    		
    		
   
===================================================> BUILT-IN MODULES <=================================================================================	
	
	
BUILT IN MODULES :
	Modules that node js ships with.
	They are also refered to as core modules.
	Import the module before you can use it.	
	
	Some important built-in modules are:
		1. path
		2. events 
		3. fs
		4. stream
		5. http
		
		

	
	
####. 1. PATH MODULE :
	path module provides utilities for working with file and directory path.
	

callback funcction: 
	Any function that passed as an argument to another function is called as callback function.
	
	Also a function which accepts a function or return another function is called as higher order function.
	
	e.g. 
	
	 	function greet(name){                  //this is callback function
   		 console.log(`hello ${name}`)
		}

		function greetAkshay(greetFn){         // this is higher order function
  		  const name="Akshay";
  		  greetFn(name)
		}

		greetAkshay(greet)



	Types of callback function :
		1. Synchronous 
		2. Asynchronous
			
		
	1. Synchronous callback function:
		A callback which is executed immediately is called synchronous callback function.
		e.g. above greet function, sort, filter, map
		
		
	2. Asynchronou callback function:
		A callback that is often used to continue or resume code execution after an asynchronous operation has completed.
		Callback used to delay the execution of a function until a perticular time or event has occurred. 
		
		e.g. click handler on some button , means the function is only invoked when someone click on the button.
		
		
		
		
####. 2. EVENTS MODULE: 
 	The events module allows us to work with events in Node.js.
 	An event is an action or occurence that has happened in our application that we can respond to.
 	Using the events module, we can dispatch our own custom events and respond to those custom events in a non-blocking manner.
 	
 	
 	e.g. 
 	 in index.js 
 	 
 	 const EventEmitter= require("events");
 	 const emitter=new EventEmitter();
 	 emitter.on("order-pizza", (h)=>{
 	 	console.log("Order received!! baking a pizza", h)
 	 })
	
	emitter.emit("order-pizza", "hello")
	
	
	
	
	
	Binary data:
		0's and 1's that computers can understand.
		
	Character sets:
		Predefined lists of characters represented by numbers.
		
	Character encoding:
		First it converts character to its ASCII code or UNICODE and then convert it into its binary code.
		
	Streams:
		e.g. Youtube, we dont wait for the entire video download, video will start playing when some of the data is downloaded.
		
		i.e. The contents arrive in chunks and you watch in chunks while the rest of the data arrives over time. 
		
		Process streams of data in chunks as they arrive instead of waiting for the entire data to be available before processing.
		
		
	Buffer:
		suppose in hall there is only 30 people seating arrangement, but remaining 70 out of 100 needs to wait, 
		So the area where people waits is nothing but the buffer.
		
		
		e.g.  streming a video online
			If your connection is fast enough, the speed of the stream will be fast enough to instantly fill up the buffer and send it out for processing.
			That will repeat till the stream is finished.
			If your connection is slow, after processing the first chunk of data that arrived, the video player will display a loading spinner           which indicates it is waiting for more data to arrive.
			Once the buffer is filled up and data is processed, the video player shows the video.
			
			
	
####. 3. FS MODULE: (File System module)
	e.g . 
	 in file.text 
	 
	 	Hello
	 	
	 in index.js
	 const fs=require("fs")
	 const content=fs.readFileSync("./file.txt", "utf-8")
	 console.log(content);
	 
	 O/p: hello 
	 	Note: if we do not write utf-8 then it will display ascii code of characters.
	
	
	//below is synchronous
	fs.writeFileSync("./greet.txt", "hellow world")   // it will create greet.txt file if not exist and add hellow world in it
	
	fs.writeFile("./greet.txt", "Hii",(err)=>{               //asynchronous 
		if(err){
			console.log(err);
		}
		else{
			console.log("data changed successfully");
		}
	})
	
	
	note it will add Hii in greet.txt and remove Hellow world from greeet.txt file, to append file we use
	
	fs.writeFileSync("./greet.txt"," Hii",{flag:"a"} ...and then rest of the things)  // a in the sense of append
	
	//op it adds text i.e. Hellow world Hii
	
	
	
	
	
	
	##############fs using promise###################
	
	index.js
	
	const fs=require("fs/promises")
	fs.readFile("./greet.txt","utf-8")
	.then((data)=>console.log(data))
	.catch((error)=>console.log(error))


	note=> 
		it will gives us a proper output. 
		it is also ASYNCHRONOUS that means other task are executed before it.
		
		const fs=require("fs/promises")
		console.log("first")
		
		fs.readFile("./greet.txt","utf-8")
		.then((data)=>console.log(data))
		.catch((error)=>console.log(error))

		console.log("second")
		
		
		Output:
			first
			second
			Hello 3.Akshay
			
	
	
########3. STREAMS :
		e.g. Youtube, we dont wait for the entire video download, video will start playing when some of the data is downloaded.
		
		i.e. The contents arrive in chunks and you watch in chunks while the rest of the data arrives over time. 
		
		Process streams of data in chunks as they arrive instead of waiting for the entire data to be available before processing.
		
		
		
##### 4. PIPES:
	used for chaining. i.e. for copying data from one file to another file .
	
	in index.js
	
	const fs=require("fs")
	const readableStream=fs.createReadStream("./file.txt",{
		encoding:"utf-8",
		highWaterMark:2,
	})
	
	const writableStream=fs.createWriteStream("./file2.txt")
	readableStream.pipe(writeableStrem)
	
	
	
	NOTE: 
		it will copy all data inside readableStream to writableStream
		
		
		
		
########5. HTTP MODULE:
		in web server there is a communication between client and server, but what type of request send by client is can not understand by server and also what kind of response send to the server can not understand by client.
		The client sends an HTTP requests and the server responds with a HTTP response.
		
		

	
