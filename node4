WHAT IS NPM  : (node package manager)
	it is the worlds largest software library.
	it is the software package manager.
	
	npm is a library which contains code packages written by various developers. 
	

	 
WHAT IS package.json: 
	package.json is npm's configuration file.
	It is a json file that typically lives in the root directory of your package and holds various metadata releavant to the package.
	
	why we need package.json
		package.json is the central place to configure and describe how to interact with and run your package. 
		
	it is primarily used by npm CLI.
	
 	in dependencies of package.json we have all the packages which are installed in our project.
 	
 	
 
 PUBLISHING NODE PACKAGE: 
 	visit npmjs.com and click on sign up , after that go to your project directory, and type 
 		npm adduser __username__
 		
 		after that enter what terminal asks.
 		
 		
 		after that enter command : npm publish 
 		
 		then it will publish your application . 
 		
 		NOTE: 
 			for checking of published package, visit site: https://npmjs.com/package/package_name
 			
 			


CLI (COMMAND LINE INTERFACE) : BUILDING CLI:
	CLI stands for Command Line Interface. 
	A program that you can run from the terminal.
	
	e.g. npm and git
	
	
	=====above need to learn====



=====================================><==============================================================================================================================


CLUSTER MODULE:
	we know that node is a single threaded application.
	No matter how many cores you have, node only uses single core of your CPU.
	This is fine for I/O operations but if the code has long running and CPU intensive operations, your application might struggle from a perfomance point of view.
	
	for avoid this issue node introduce cluster module.
	
	
	The cluster module enables the creation of child processes (also called workers) that run simultaneously.
	All created worker share the same worker port.	
 
 	e.g. WITHOUT cluster module .
 		suppose our applications have two routes , first route is taken 3 ms for fetching data and second route is taking 4 seconds for fetching data , then if we again refreshh first route then first route also takes 4 to 5 secondds or fetching data , so to avoid this we use cluste model .
 		
 		e.g. without cluster module 
 			const http=require("http");
 			const {Worker}=require("worker_threads");
 			const server=http.createServer((req, res)=>{
 				if(req.url==="/"){
 					res.writeHead(200,{"Content-Type":"text/plain"})
 					res.end("Home page")
 				}
 				else if(req.url==="/slow-page"){
 					let j=0;
 					for(let i=0;i<200000;i++){
 						j++;
 					}
 					res.writeHead(200,{"Content-Type":"text/plain"})
 					res.end(`slow page ${j}`)
 					
 				}
 			})
 			server.listen(8000, ()=>console.log("server listen on port 8000"))
 		
 		
 		
 		
 		
 		e.g. with cluster 
 		
 		
 		const cluster=require("cluster");
 		if(cluster.isMaster){
 			console.log(`Master process ${process.pid} is running`);
 			cluster.fork();
 			cluster.fork();
 		}
 		else{
 			console.log(`Worker ${process.pid} started`);
 			const server=http.createServer((req, res)=>{
 				if(req.url==="/"){
 					res.writeHead(200, {"Content-Type":"text/plain"});
 					res.end("Home page");
 				}else if(req.url==="/slow-page"){
 					for(let i=0;i<1000000;i++){}
 					res.writeHead(200, {"Content-Type":"text/plailn"})
 					res.end("slow page")
 				}
 			})
 			
 			server.listen(8000, ()=>console.log("server up and running "))
 		}
 		
 		
 		
 		O/P: 
 			Master process 3242 is running
 			Worker 3244 started
 			Worker 3243 started
 			server up and running 
 			
 			
 			NOTE : HERE IT WILL NOT AFFECT ON / route as we use cluster.
 			
 		
 ========================================================================================================================================================
 
 WORKER THREAD MODULE: 
 	The worker thread module enables the use of threads that execute the Javascript in parallel.
 	Code executed in worker thread runs in a seperate child process, preventing it from blocking your main application.
 	
 	
 	difference between cluster and worker module : 
 		The cluster module can be used to run multiple instances of node js that can distribute workloads.
 		worker thread module allows running multiple application threads within a single Node.js instance.
 		
 	
 	
 	e.g. 
 	
 		in index.js 
 			
 			const http=require("http");
 			const {Worker}=require("worker_threads");
 			const server=http.createServer((req, res)=>{
 				if(req.url==="/"){
 					res.writeHead(200,{"Content-Type":"text/plain"})
 					res.end("Home page")
 				}
 				else if(req.url==="/slow-page"){
 					const worker = new Worker("./worker-threads.js");
 					worker.on("message", (j)=>{                                  //for getting message in index.js from worker-threads.js
 						res.writeHead(200,{"Content-Type":"text/plain"})
 						res.end(`slow page ${j}`)
 					})
 				}
 			})
 			server.listen(8000, ()=>console.log("server listen on port 8000"))
 			
 			
 			
 			in worker-threads.js
 			
 			const { parentPort }=require("worker-threads");
 			let j=0;
 			for(let i=0;i<200000;i++){
 				j++;
 			}
 			
 			parentPort.postMessage(j); 						
 		
 
